/* This file has been generated using risgo, do not modify! */
#include <algorithm>
#include <functional>
#include "examples/resource03.h"

namespace test {

    std::string res::string_test() {
        static char const literal[] = {
112, 108, 97, 105, 110, 32, 116, 101, 120, 116 }
        ;
        return std::string(literal, sizeof(literal)/sizeof(char));
    }
    std::string res::binary_file_test() {
        static char const literal[] = {
0, 1, 2, 3 }
        ;
        return std::string(literal, sizeof(literal)/sizeof(char));
    }
    std::string res::itself() {
        static char const literal[] = {
104, 101, 97, 100, 101, 114, 58, 32, 34, 101, 120, 97, 109, 112, 108, 101, 115, 47, 114, 101, 115, 111, 117, 114, 99, 101, 46, 104, 34, 10, 10, 110, 97, 109, 101, 115, 112, 97, 99, 101, 58, 32, 34, 116, 101, 115, 116, 34, 10, 10, 99, 108, 97, 115, 115, 58, 32, 34, 114, 101, 115, 34, 10, 10, 114, 101, 115, 111, 117, 114, 99, 101, 115, 58, 10, 32, 32, 45, 10, 32
, 32, 32, 32, 110, 97, 109, 101, 58, 32, 34, 115, 116, 114, 105, 110, 103, 95, 116, 101, 115, 116, 34, 10, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 58, 32, 34, 112, 108, 97, 105, 110, 32, 116, 101, 120, 116, 34, 10, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 95, 116, 121, 112, 101, 58, 32, 34, 115, 116, 114, 105, 110, 103, 34, 10, 32, 32, 45, 10, 32, 32
, 32, 32, 110, 97, 109, 101, 58, 32, 34, 98, 105, 110, 97, 114, 121, 95, 102, 105, 108, 101, 95, 116, 101, 115, 116, 34, 10, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 58, 32, 34, 116, 101, 115, 116, 46, 98, 105, 110, 34, 10, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 95, 116, 121, 112, 101, 58, 32, 34, 102, 105, 108, 101, 34, 10, 32, 32, 45, 10, 32, 32
, 32, 32, 110, 97, 109, 101, 58, 32, 34, 105, 116, 115, 101, 108, 102, 34, 10, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 58, 32, 34, 116, 101, 115, 116, 46, 121, 109, 108, 34, 10, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 95, 116, 121, 112, 101, 58, 32, 34, 102, 105, 108, 101, 34, 10, 32, 32, 35, 32, 45, 10, 32, 32, 35, 32, 32, 32, 99, 111, 109, 112
, 114, 101, 115, 115, 105, 111, 110, 58, 32, 34, 76, 90, 52, 70, 34, 10, 32, 32, 35, 32, 32, 32, 110, 97, 109, 101, 58, 32, 34, 105, 116, 115, 101, 108, 102, 95, 112, 97, 99, 107, 101, 100, 95, 108, 122, 52, 34, 10, 32, 32, 35, 32, 32, 32, 115, 111, 117, 114, 99, 101, 58, 32, 34, 116, 101, 115, 116, 46, 106, 115, 111, 110, 34, 10, 32, 32, 35, 32, 32, 32
, 115, 111, 117, 114, 99, 101, 95, 116, 121, 112, 101, 58, 32, 34, 102, 105, 108, 101, 34, 10, 32, 32, 45, 10, 32, 32, 32, 32, 109, 101, 109, 98, 101, 114, 95, 110, 97, 109, 101, 58, 32, 34, 99, 117, 115, 116, 111, 109, 95, 109, 101, 109, 98, 101, 114, 95, 110, 97, 109, 101, 34, 10, 32, 32, 32, 32, 110, 97, 109, 101, 58, 32, 34, 99, 117, 115, 116, 111, 109, 46
, 109, 101, 109, 98, 101, 114, 47, 110, 97, 109, 101, 34, 10, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 58, 32, 34, 116, 101, 115, 116, 34, 10, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 95, 116, 121, 112, 101, 58, 32, 34, 115, 116, 114, 105, 110, 103, 34, 10, 10, 32, 32, 45, 10, 32, 32, 32, 32, 110, 97, 109, 101, 58, 32, 34, 109, 117, 108, 116, 105, 108
, 105, 110, 101, 95, 101, 120, 97, 109, 112, 108, 101, 34, 10, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 58, 32, 124, 45, 10, 32, 32, 32, 32, 32, 32, 116, 104, 101, 115, 101, 32, 97, 114, 101, 10, 10, 32, 32, 32, 32, 32, 32, 116, 104, 114, 101, 101, 32, 108, 105, 110, 101, 115, 10, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 95, 116, 121, 112, 101, 58, 32
, 34, 115, 116, 114, 105, 110, 103, 34, 10, 10, 115, 111, 117, 114, 99, 101, 58, 32, 34, 101, 120, 97, 109, 112, 108, 101, 115, 47, 114, 101, 115, 111, 117, 114, 99, 101, 46, 99, 112, 112, 34, 10 }
        ;
        return std::string(literal, sizeof(literal)/sizeof(char));
    }
    std::string res::custom_member_name() {
        static char const literal[] = {
116, 101, 115, 116 }
        ;
        return std::string(literal, sizeof(literal)/sizeof(char));
    }
    std::string res::multiline_example() {
        static char const literal[] = {
116, 104, 101, 115, 101, 32, 97, 114, 101, 10, 10, 116, 104, 114, 101, 101, 32, 108, 105, 110, 101, 115 }
        ;
        return std::string(literal, sizeof(literal)/sizeof(char));
    }

namespace internal {
struct dict { std::string key; res::ResourceGetter getter; };
struct key_is : std::unary_function<internal::dict const&,bool> {
    std::string seeking;
public:
    key_is(std::string const& s):seeking(s){}
    bool operator()(internal::dict const& d) const {
        return d.key == seeking;
    }
};
}

std::string res::Get(std::string const& key) {
    static internal::dict getters[] = {
      { "string_test", res::string_test },
      { "binary_file_test", res::binary_file_test },
      { "itself", res::itself },
      { "custom.member/name", res::custom_member_name },
      { "multiline_example", res::multiline_example },
    };
    internal::dict* end = getters+sizeof(getters)/sizeof(internal::dict);
    internal::dict* found = std::find_if(getters,end,internal::key_is(key));
    if (found!=end)
        return found->getter();
    else
        return OnNoKey(key);
}

}