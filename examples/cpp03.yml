header: |-
        #pragma once
        /* This file has been generated using risgo, do not modify! */
        #include <string>

        namespace {{namespace_name}} {

        class {{class_name}} /*final*/ {
        public:
          {{#each resource}}
            static std::string {{member_name}}();
          {{/each}}
        public:
            typedef std::string(*ResourceGetter)();
        public: // key/value api
        template <typename TInserter>
        static void GetKeys(TInserter inserter) {
            static const char* keys[] = {
                {{#each resource}}
                "{{name}}",
                {{/each}}
            };
            for (size_t i=0; i<sizeof(keys)/sizeof(char*); i++) {
                inserter(keys[i]);
            }
        }
        public: // key/value api
            static std::string Get(std::string const& key);

        public:
            static std::string OnNoKey(std::string const& key="") {
                return "";
            }
        };

        }

source: |-
        /* This file has been generated using risgo, do not modify! */
        #include <algorithm>
        #include <functional>
        #include "{{source_include}}"

        namespace {{namespace_name}} {

        {{#each resource}}
            std::string {{class_name}}::{{member_name}}() {
                static char const literal[] = {
        {{bytes}} }
                ;
                return std::string(literal, sizeof(literal)/sizeof(char));
            }
        {{/each}}

        namespace internal {
        struct dict { std::string key; {{class_name}}::ResourceGetter getter; };
        struct key_is : std::unary_function<internal::dict const&,bool> {
            std::string seeking;
        public:
            key_is(std::string const& s):seeking(s){}
            bool operator()(internal::dict const& d) const {
                return d.key == seeking;
            }
        };
        }

        std::string {{class_name}}::Get(std::string const& key) {
            static internal::dict getters[] = {
            {{#each resource}}
              { "{{name}}", {{class_name}}::{{member_name}} },
            {{/each}}
            };
            internal::dict* end = getters+sizeof(getters)/sizeof(internal::dict);
            internal::dict* found = std::find_if(getters,end,internal::key_is(key));
            if (found!=end)
                return found->getter();
            else
                return OnNoKey(key);
        }

        }
